#!/bin/bash -e

# This template should be used to specify the parameter for the module calls
# One can either submit one module at a time or combined several to stage qsub
# submissions

# Copy this file and name it after your new module
# Substitute [MOD] and similar places with the appropriate variables

################################################################################
#   Trigger command for individual [MOD]
#
# IN : $SOURCE/$dir/INPUT_[MOD]/*.[inputfile.suffix]
# OUT: $OUT/$dir/TASK_[MOD]/*.[outputfile.suffix]
################################################################################

: ' # [TODO] REMOVE THIS LINE

if [ -n "$RUN[MOD]" ] || [ -n "$NGSANE_PIPELINECALL" ]; then
    
    ############################################################################
    # Wether to submit a job or compile a report
    if [ -z "$NGSANE_COMPILE_REPORT" ]; then

        # HPC variables as defined in the corresponding resource script at NGSANE_BASE/conf/header.d/[MOD]
        if [ -z "$TASK_[MOD]" ] || [ -z "$NODES_[MOD]" ] || [ -z "$CPU_[MOD]" ] || [ -z "$MEMORY_[MOD]" ] || [ -z "$WALLTIME_[MOD]" ]; then 
            echo -e "\e[91m[ERROR]\e[0m Server misconfigured"; exit 1; 
        fi
        
        # Choose ONE qsub call from below and fill in the variables as required and adapt as required
    
        # 1) SINGLE command working on fastq files (see FASTQC as example)
        $QSUB $ARMED $NGSANE_WAITFORJOB -k $CONFIG -t $TASK_[MOD] -i $INPUT_[MOD] -e $READONE.$FASTQ \
            -n $NODES_[MOD] -c $CPU_[MOD] -m $MEMORY_[MOD]"G" -w $WALLTIME_[MOD] \
        	--command "${NGSANE_BASE}/mods/[MOD].sh -k $CONFIG -f <FILE> -o $OUT/<DIR>/$TASK_[MOD]" 
        	
        # 2) SINGLE command working on fastq files	and producing fastq files as well (see TRIMMOMATIC as example)
        $QSUB $ARMED $NGSANE_WAITFORJOB -d -k $CONFIG -t $TASK_[MOD] -i $INPUT_[MOD] -e $READONE.$FASTQ 
            -n $NODES_[MOD] -c $CPU_[MOD] -m $MEMORY_[MOD]"G" -w $WALLTIME_[MOD] \
            --command "$NGSANE_BASE/mods/[MOD].sh -k $CONFIG -f <FILE>"
           
        # 3) SINGLE command NOT working on fastq files (see MACS2 as example)
        $QSUB $ARMED $NGSANE_WAITFORJOB -r -k $CONFIG -t $TASK_[MOD] -i $INPUT_[MOD] -e [inputfile.suffix] \
            -n $NODES_[MOD] -c $CPU_[MOD] -m $MEMORY_[MOD]"G" -w $WALLTIME_[MOD] \
            --command "${NGSANE_BASE}/mods/[MOD].sh -k $CONFIG -f <FILE> -o $OUT/<DIR>/$TASK_[MOD]"
    
        # 4) COMMAND and POSTCOMMAND NOT working on fastq files (see HTSEQCOUNT as example)
        $QSUB $ARMED $NGSANE_WAITFORJOB -r -k $CONFIG -t $TASK_[MOD] -i $INPUT_[MOD] -e [inputfile.suffix] \
            -n $NODES_[MOD] -c $CPU_[MOD] -m $MEMORY_[MOD]"G" -w $WALLTIME_[MOD] \
            --command "${NGSANE_BASE}/mods/[MOD].sh -k $CONFIG -f <FILE> -o $OUT/<DIR>/$TASK_[MOD]" \
            --postname postcommand$[MOD] \
            --postcommand "${NGSANE_BASE}/mods/[MODPOSTCOMMAND].sh -f <FILE> -k $CONFIG --outdir $OUT/<DIR>/$TASK_[MOD]"
      
                   
    ############################################################################
    # Select either of the one below to provide a report for this mod
    elif [ -n "$NGSANE_COMPILE_REPORT" ]; then

        # start a new section for a mod
        NGSANE_REPORT_HEADER "[MOD]" "$TASK_[MOD]" "[MOD].sh,[MODPOSTCOMMAND].sh" "[PRIMARY OUTPUT FILE SUFFIX - optional]"

        # 1) add as many tables as needed.         
        NGSANE_REPORT_TABLE "$TASK_[MOD]"                      \
            ""                                                 \ # Data table custom headline (optional)
            "[FOLDER_PATTERN]"                                 \ # how the output is arranged, see -o parameter above e.g. $OUT/<DIR>/$TASK_[MOD]/<SAMPLE>/
            "[FILE_SUFFIX]"                                    \ # which files to parse, .e.g $ASD.bam.stats
            "LINK:[LINK]"                                      \ # one external link permitted
            "FIGURE:TABLEHEAD:WIDTH:[FIGURE]:HEIGHT:IMGBORDER" \ # place a figure in the table cell (multiple times possible)
            "PATTERN:TABLEHEAD:WIDTH:[GREP COMMAND]"           \ # parse file for this pattern (multiple times possible)
            "DYNAMIC_COLS:[x,y]:WIDTH:[COLUMN COMMAND]"        \ # parse columns x to y from tsv file using the first row as header, 
                                                               \ # and passing the remainder onto the column command
            "DYNAMIC_ROWS:[x,y]:WIDTH:[ROW COMMAND]"           \ # parse row x to y from tsv file using the first column as header, 
                                                               \ # and passing the remainder onto the row command
            "CALCULATE:TABLEHEAD:WIDTH:[FORMULA]"                # use formular to calculate from previousely defined columns 
                                                                 #  - use '#x' to specify the x-th column, e.g. #4*100/#2

        # 2) Postcommand agregates can be summarized in a similar 
        NGSANE_REPORT_TABLE_AGGREGATE "$TASK_[MODPOSTCOMMAND]" \
            "[FOLDER_PATTERN]" \
            "[FILE_SUFFIX]" \
            "PATTERN:TABLEHEAD:WIDTH:[GREP COMMAND]"           \ # parse file for this pattern (multiple times possible)
            "FIGURE:TABLEHEAD:WIDTH:<AGGREGATE>[FIGURESUFFIX]:HEIGHT:IMGBORDER"  # place a figure in the table cell (multiple times possible)
                    
        # 3) or provide information that there will be no 
        echo "[NOTE] the [MOD].sh mod does not provide a report"

        # finish the section
        NGSANE_REPORT_FOOTER 
        
    fi
    
    # done
fi

' # [TODO] REMOVE THIS LINE
